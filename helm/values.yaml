replicaCount: 1

image:
  repository: registry.shohr.uz/fastapi_minikube/fastapi-minikube
  pullPolicy: Always
  tag: latest


imagePullSecrets: 
  - name: regcred

nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


command:
  cmd:
    - uvicorn 
    - main:app 
    - --reload 
    - --port 
    - "8082"

env:
  - name: DATABASE_HOST
    valueFrom:
      secretKeyRef:
        name: fastapi-minikube-secret
        key: DATABASE_HOST
  - name: DATABASE_PORT
    valueFrom:
      secretKeyRef:
        name: fastapi-minikube-secret
        key: DATABASE_PORT
  - name: DATABASE_USER
    valueFrom:
      secretKeyRef:
        name: fastapi-minikube-secret
        key: DATABASE_USER
  - name: DATABASE_PASSWORD
    valueFrom:
      secretKeyRef:
        name: fastapi-minikube-secret
        key: DATABASE_PASSWORD

  - name: PROJECT_NAME
    value: "fastapi_minikube"
  - name: HOST
    value: "0.0.0.0"
  - name: PORT
    value: "8082"

  - name: SECRET_KEY
    valueFrom:
      secretKeyRef:
        name: fastapi-minikube-secret
        key: SECRET_KEY

  - name: REDIS_CUSTOM_HOST
    valueFrom:
      secretKeyRef:
        name: fastapi-minikube-secret
        key: REDIS_CUSTOM_HOST
  - name: REDIS_CUSTOM_PORT
    valueFrom:
      secretKeyRef:
        name: fastapi-minikube-secret
        key: REDIS_CUSTOM_PORT
  - name: REDIS_CUSTOM_DB
    valueFrom:
      secretKeyRef:
        name: fastapi-minikube-secret
        key: REDIS_CUSTOM_DB




# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: NodePort
  port: 8082
  targetPort: 8082
  nodePort: 30052


# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    cpu: 200m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  enabled: false
  cheak:
    httpGet:
      path: /health
      port: 8080
    terminationGracePeriodSeconds: 30

# ----------------------------------------------
readinessProbe:
  enabled: false
  cheak:
    httpGet:
      path: /health
      port: 8080

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
  targetMemoryUtilizationPercentage: 50

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
